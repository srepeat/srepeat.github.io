{"meta":{"title":"blogs","subtitle":"","description":"","author":"yangon_code","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"spring boot搭建分布式","slug":"spring-boot搭建分布式","date":"2020-02-09T05:16:54.000Z","updated":"2020-02-09T05:22:37.460Z","comments":true,"path":"2020/02/09/spring-boot搭建分布式/","link":"","permalink":"http://yoursite.com/2020/02/09/spring-boot%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F/","excerpt":"","text":"springBoot 分布式zookeeper+Dubbo一、基础知识 什么是分布式系统 12341、分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统2、分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。3、分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是利用更多的机器，处理更多的数据。 为什么提倡分布式架构 随着互联网规模和需求越来越大，传统的单体应用已经不能支撑 单一应用架构 将网站所有东西打包在一个应用中，将其部署，减少部署成本，此时ORM成为重点 - 优点：适合小网站，访问量不大的情况下 缺点： 1. 性能扩展比较难 2. 协同开发问题 3. 不利于升级维护 垂直应用架构 当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键 通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性 缺点：公用模块无法重复利用，开发性的浪费 分布式架构 将业务进行拆分，每一个业务作为一个单独的服务抽离出来，形成稳定的服务中心 用于提高业务和复合整用为RPC分布式服务框架重点 流动计算架构 当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此)时，用于提高机器利用率的资源调度和治理中心(SOA)[ Service Oriented Architecture]是关键。 什么是RPC？ RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。 两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数；推荐文章 RPC原理图 步骤分析注意：RPC两个核心模块=&gt;通讯、序列化 二、Dubbo 什么是Dubbo Dubbo是阿里巴巴开源的基于 Java 的高性能 RPC（一种远程调用） 分布式服务框架（SOA），致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。 为什么使用Dubbo 使用Dubbo可以将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，可用于提高业务复用灵活扩展，使前端应用能更快速的响应多变的市场需求。 分布式架构可以承受更大规模的并发流量。 服务提供者（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务 服务消费者（Consumer）: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。 注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者 监控中心（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心 dubbo官网 调用关系说明 1234567891011服务容器负责启动，加载，运行服务提供者。1、 服务提供者在启动时，向注册中心注册自己提供的服务。2、 服务消费者在启动时，向注册中心订阅自己所需的服务。3、 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。4、 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。5、 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。 - 注册--&gt;订阅模式 Dubbo环境搭建 下载zookeeper，下载地址，本次使用zookeeper-3.4.11 运行/bin/zkServer.cmd ，初次运行会报错，没有zoo.cfg配置文件 可能遇到问题：闪退 ! 解决方案：编辑zkServer.cmd文件末尾添加pause 。这样运行出错就不会退出，会提示错误信息，方便找到原因 修改zoo.cfg配置文件 将conf文件夹下面的zoo_sample.cfg复制一份改名为zoo.cfg即可 注意几个重要位置： dataDir=./ 临时数据存储的目录（可写相对路径） clientPort=2181 zookeeper的端口号 改完成后再次启动zookeeper window下安装dubbo-admin dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务 dubbo-admin 是一个服务监控面板 这里不安装也不影响使用 下载dubbo-admin 下载地址 解压进入目录 案例版本是dubbo-2.7版本admin-dubbo-server/src\\main\\resources =&gt; \\application.properties 指定zookeeper地址 123456789101112131415161718server.port=7001 # 自己添加的一个控制台访问端口admin.registry.address=zookeeper://127.0.0.1:2181admin.config-center=zookeeper://127.0.0.1:2181admin.metadata-report.address=zookeeper://127.0.0.1:2181admin.root.user.name=rootadmin.root.user.password=root#groupadmin.registry.group=dubboadmin.config-center.group=dubboadmin.metadata-report.group=dubboadmin.apollo.token=e16e5cd903fd0c97a116c873b448544b9d086de9admin.apollo.appId=testadmin.apollo.env=devadmin.apollo.cluster=defaultadmin.apollo.namespace=dubbo 在项目目录下打包dubbo-admin 1mvn clean package -Dmaven.test.skip=true 第一次打包的过程有点慢，需要耐心等待！直到成功 执行 dubbo-admin\\target 下的dubbo-admin-0.0.1-SNAPSHOT.jar 1java -jar dubbo-admin-0.0.1-SNAPSHOT.jar 注意：一定要开启zookeeper服务 执行完毕，我们去访问一下 http://localhost:7001/ ， 这时候我们需要输入登录账户和密码，我们都是默认的root-root； 登陆成功页面(这个是2.7版本Vue实现，所以比之前的肯定好看很多) SpringBoot + Dubbo + zookeeper 框架搭建 启动zookeeper IDEA创建一个新的空项目 创建一个模块，实现服务提供者：provider-server ， 选择web依赖即可 项目创建完毕，我们写一个服务 实现一个案例： 编写接口 1234public interface TacketService &#123; String getTacket();&#125; 2. 实现类 123456public class TackServiceImpl implements TacketService &#123; String getTacket()&#123; return null; &#125;&#125; 5. 创建一个模块，实现服务消费者：consumer-server ， 选择web依赖即可 6. 项目创建完毕，我们写一个服务，比如用户的服务； - 编写service 123@Servicepublic class UserService &#123;&#125; - 需求：现在要给消费者提供服务怎么做？ * 服务提供者(provider) - - 将服务提供者注册到注册中心，我们需要整合Dubbo和zookeeper，所以需要导包 1234567从dubbo官网进入github，看下方的帮助文档，找到dubbo-springboot，找到依赖包&lt;!-- Dubbo Spring Boot Starter --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt; &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.7.3&lt;/version&gt; &lt;/dependency&gt; - zookeeper的包我们去maven仓库下载，zkclient； 123456&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;0.1&lt;/version&gt;&lt;/dependency&gt; - 【新版的坑】zookeeper及其依赖包，解决日志冲突，还需要剔除日志依赖； 1234567891011121314151617181920212223&lt;!-- 引入zookeeper --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.curator&lt;/groupId&gt; &lt;artifactId&gt;curator-framework&lt;/artifactId&gt; &lt;version&gt;2.12.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.curator&lt;/groupId&gt; &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt; &lt;version&gt;2.12.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.14&lt;/version&gt; &lt;!--排除这个slf4j-log4j12--&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; * 在springboot配置文件中配置dubbo相关属性！ 1234567#服务名称dubbo.application.name=provider_server#注册地址以及元数据dubbo.registry.address=zookeeper://127.0.0.1:2181dubbo.metadata-report.address=zookeeper://127.0.0.1:2181# 扫描指定包下服务dubbo.scan.base-packages=cn.jcet.service * 在service的实现类中配置服务注解，发布服务！注意导包问题 1234567891011import com.alibaba.dubbo.config.annotation.Service;import org.springframework.stereotype.Component;@Service //dubbo的注解 现在已经过期@Component //spring万能注解，将这个放到IOC容器中public class TackServiceImpl implements TacketService &#123; @Override public String getTacket() &#123; return \"卖出一张票\"; &#125;&#125; **逻辑理解 ： 应用启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中** * 服务消费者（consumer） - - 导入同提供者一样的依赖 - 配置文件 12345# 应用名dubbo.application.name=consumer_service#注册地址元数据dubbo.registry.address=zookeeper://127.0.0.1:2181dubbo.metadata-report.address=zookeeper://127.0.0.1:21811 - 本来正常步骤是需要将服务提供者的接口打包，然后用pom文件导入，我们这里使用简单的方式，直接将服务的接口拿过来，路径必须保证正确，即和服务提供者相同 - 用户服务类 1234567891011121314import org.apache.dubbo.config.annotation.Reference;import org.springframework.stereotype.Service;@Servicepublic class UserService &#123; @Reference //dubbo 远程调用注解 private TacketService tacketService; public void showTacket()&#123; String tacket = tacketService.getTacket(); System.out.println(\"Tacket服务层==&gt;\"+tacket); &#125;&#125; - 测试类编写 123456789101112@SpringBootTestclass ConsumerServerApplicationTests &#123; @Autowired private UserService userService; @Test void contextLoads() &#123; userService.showTacket(); &#125;&#125; - 启动测试 1. 开启zookeeper 2. 打开dubbo-admin实现监控（需要可视化面板查看的可以做） 3. 开启服务者 4. 消费者消费测试，结果： 5. 监控中心 * 也可以参考此篇文章 * springBoot+zookeeper+dubbo 实现简单分布式案例（不足之处，请指出，共同进步）","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-02-09T03:47:18.157Z","updated":"2020-02-09T03:47:18.158Z","comments":true,"path":"2020/02/09/hello-world/","link":"","permalink":"http://yoursite.com/2020/02/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}